generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id                 String    @id @default(cuid())
  name               String
  email              String    @unique
  phone              String?
  bio                String?
  image              String?
  registrationNumber String?
  course             String?
  year               String?
  graduationYear     String?
  dayScholar         Boolean?
  dateOfBirth        DateTime?
  isAdmin            Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  participants Participant[]

  @@map("profiles")
}

model Event {
  id                     String    @id @default(cuid())
  name                   String
  description            String
  location               String
  coverImage             String
  about                  Json?
  eventType              EventType @default(TEAM)
  minParticipantsPerTeam Int?
  maxParticipantsPerTeam Int?
  minTeams               Int?
  maxTeams               Int?
  registrationFee        Int       @default(0)
  startsAt               DateTime
  endsAt                 DateTime
  registrationStartsAt   DateTime
  registrationEndsAt     DateTime
  registrationOpen       Boolean   @default(true)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt

  teams         Team[]
  participants  Participant[]

  @@index([registrationOpen])
  @@index([eventType])
  @@index([registrationEndsAt])
  @@map("events")
}

model Team {
  id              String              @id @default(cuid())
  name            String
  description     String?
  eventId         String
  isIndividual    Boolean             @default(false)
  leaderEmail     String // Team leader's email
  status          ParticipationStatus @default(REGISTERED)
  registrationFee Int                 @default(0)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  // Relations
  event        Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  participants Participant[]
  payments     Payments[]
  
  isPaid        Boolean       @default(false)

  @@unique([name, eventId]) // Team name must be unique per event
  @@index([eventId])
  @@index([leaderEmail])
  @@map("teams")
}

model Participant {
  id              String              @id @default(cuid())
  name            String
  email           String?
  phone           String?
  year            String?
  course          String?
  eventId         String
  teamId          String?
  status          ParticipationStatus @default(REGISTERED)
  registrationFee Int                 @default(0)
  isLeader        Boolean             @default(false)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt

  profile  Profile?   @relation(fields: [email], references: [email], onDelete: SetNull)
  event    Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  team     Team?      @relation(fields: [teamId], references: [id], onDelete: SetNull)
  payments Payments[]
  isPaid        Boolean       @default(false)

  @@unique([email, eventId])
  @@index([eventId])
  @@index([email])
  @@index([teamId])
  @@index([eventId, email])
  @@map("participants")
}

model Payments {
  id            String        @id @default(cuid())
  paymentId     String? // Payment reference
  paymentMethod String? // UPI, Card, Cash, etc.
  paidAt        DateTime?
  status        PaymentStatus @default(PENDING)
  teamId        String?
  participantId String?
  team          Team?         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  participant   Participant?  @relation(fields: [participantId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([teamId])
  @@index([participantId])
  @@index([status])
}

enum EventType {
  INDIVIDUAL
  TEAM
}

enum ParticipationStatus {
  REGISTERED
  CONFIRMED
  CANCELLED
  DISQUALIFIED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}